#include "ros/ros.h"
#include "std_msgs/Float32MultiArray.h"

#include <cmath>
#include <iostream>

Class HeadAnglesController
{
public:
  HeadAnglesController();

private:
  void HeadAnglesSubCallback(const std_msgs::Float32MultiArray& headangles);  // type of msg might change




  int loa_, number_timesteps_, count_timesteps_;
  bool valid_loa_;
  float headangles[3]; // depending on the output of deepgaze pub
                       // we might change that to a single value
                       // post exponential filter or not.
  std_msgs::Bool loa_change_, loa_changed_msg_;


  ros::NodeHandle n_;
  ros::Subscriber loa_sub_, headang_sub_;
  ros::Publisher load_pub_, loa_change_pub, ai_switch_count_pub_, loa_changed_pub_;
  ros::Timer cost_;



}
// Subscriber
HeadAnglesController::HeadAnglesSubCallback(const std_msgs::Float32MultiArray& headangles)
{
  headangles = n_subscribe("headangles",)
}


int main(int argc, char *argv[])
{

  ros::init(argc, argv, "headang_sub");


  ros::Rate r(15); // 15hz
  while (pros::ok())
  {
    ros::spinOnce();
    r.sleep();
  }


}
